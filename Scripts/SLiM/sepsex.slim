// Keywords: separate sexes
// Varying sex ratios being simulated, with sex ratio (S) & N per simulation being defined while running the simulation

initialize() {
	defineConstant("L", 1e8); //genome size
	initializeSLiMOptions(keepPedigrees = T, nucleotideBased=T); //pedigree important to find number of reproducing individuals per generation (ReproInds)
	initializeAncestralNucleotides(randomNucleotides(L)); //all individuals have the same genome at Gen = 1
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0); //neutral mutations
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(0.4e-8)); 
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
}

//Measuring the number of segregating sites
function (lifso) Seg_sites(lifso<Subpopulation> n){
	return length(sim.mutationCounts(n));
}

//Function for creating tagL0 vectors as per sex-ratio. Converts sex ratio input to a vector of T & F such that their proportions match the defined sex ratios
function (logical) Sex_ratio(float n){
	x = asInteger(n*N);
	return c(rep(T,x),rep(F,N-x)); //female = F, male = T
}


// Logging different parameters
1 early() {
	sim.addSubpop("p1", N);
	p1.individuals.tagL0 = Sex_ratio(S);
	//Results in equal sex ratios
	log = community.createLogFile(paste0(N,"_sepsex_",S,".txt"), sep = "\t", logInterval = 10);
	log.addCycle();
	log.addCustomColumn("Heterozygosity", "calcHeterozygosity(p1.genomes);");
	log.addCustomColumn("Watt_theta", "calcWattersonsTheta(p1.genomes);");	
	log.addCustomColumn("Seg_sites", "Seg_sites(p1);");
	log.addCustomColumn("ReproInds", "length(unique(p1.individuals.pedigreeParentIDs));");
}

modifyChild() {
	if (parent1.tagL0 == parent2.tagL0)
	return F;
	//Change this to mediate sex ratios (not fully sure how it works).
	child.tagL0 = (runif(1) <= S);
	// runif samples values between 0,1. Figure out from which distribution. If runif(1) <= 0.5 = F, child.tagL0 = Female, else, male.
	return T;
}


50000 late() {p1.genomes.outputVCF(paste0(N,"_ss_",S,".vcf"));}

